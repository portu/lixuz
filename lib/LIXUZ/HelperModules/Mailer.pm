package LIXUZ::HelperModules::Mailer;
use Moose;
use JSON qw(encode_json);
use Carp;
use IPC::Open2;
use IO::Socket::UNIX;

has '_mails' => (
    is => 'ro',
    default => sub { [] },
);

has '_defaultFrom' => (
    is => 'ro',
    builder => '_buildFrom',
    lazy => 1,
);

has '_socket' => (
    is => 'rw',
);

has '_socketConnection' => (
    is => 'rw'
);

has 'streaming' => (
    is => 'ro',
    required => 0,
    default => 0,
);

has 'c' => (
    is => 'rw',
    required => 1,
    weak_ref => 1,
);

sub add_mail
{
    my $self = shift;
    my $settings = shift;

    my $recipients  = $settings->{recipients};
    my $subject     = $settings->{subject};
    my $contentText = $settings->{message_text};
    my $contentHtml = $settings->{message_html};
    my $from        = $settings->{from};
    my $systemMail  = $settings->{systemMail};
    my $footer      = $settings->{footer};

    if (!ref($recipients))
    {
        $recipients = [ $recipients ];
    }

    if (scalar @{$recipients} < 1)
    {
        carp('add_mail(): no recipients');
    }
    if (!defined($contentHtml) && !defined($contentText))
    {
        carp('add_mail(): no content');
    }
    if (!defined($subject))
    {
        carp('add_mail(): no subject');
    }
    if(
        defined $self->c->config->{LIXUZ}->{email_to_override} && 
        (not $self->c->config->{LIXUZ}->{email_to_override} eq 'false') &&
        length $self->c->config->{LIXUZ}->{email_to_override})
    {
        if ($contentHtml)
        {
            $contentHtml = 'ORIGINAL TO: '.join(',',@{ $recipients })."<br />\n<br />\n".$contentHtml;
        }
        if ($contentText)
        {
            $contentText = 'ORIGINAL TO: '.join(',',@{ $recipients })."\n\n".$contentText;
        }
        $recipients = [ $self->c->config->{LIXUZ}->{email_to_override} ];
    }
    if($systemMail)
    {
        $footer //= $self->c->stash->{i18n}->get('This message has been automatically generated by Lixuz');
        if ($contentText)
        {
            $contentText .= "\n\n--\n".$footer."\n".$self->c->uri_for('/admin');
        }
        if ($contentHtml)
        {
            $contentHtml .= "<br />\n<br />\n--\n".$footer."<br />\n".'<a href="'.$self->c->uri_for('/admin').'">'.$self->c->uri_for('/admin').'</a>';
        }
    }
    my $result = {
            distinct_to  => $recipients,
            from         => $from,
            subject      => $subject,
            message_text => $contentText,
            message_html => $contentHtml,
    };
    if ($self->streaming)
    {
        return $self->_stream_out($result);
    }
    else
    {
        push(@{ $self->_mails },$result);
    }
}

sub send
{
    my $self = shift;
    if ($self->streaming)
    {
        $self->_stream_out({
                END => 1
            });
        return;
    }
    my $from = $self->_defaultFrom;

    my $result = {
        default_from => $from,
        emails => $self->_mails,
    };
    $self->_execute_mailer($result);
}

sub _stream_out
{
    my $self   = shift;
    my $data   = shift;
    my $socket = $self->_socket;
    if ( ! defined $socket)
    {
        $socket = '/tmp/.lixuz-streaming-mailer-socket-'.$$.'-'.int(rand(999999999)).'-'.time.'-'.$<.'-'.$>.'-'.int(rand(999));
        # Incredibly unlikely, but could still happen
        if (-e $socket)
        {
            return $self->_stream_out($data);
        }
        $self->_execute_mailer({
                socket => $socket
            });
        while(! -e $socket)
        {
            sleep(1);
        }
        my $connection = IO::Socket::UNIX->new(
            Peer    => $socket,
            Type    => SOCK_STREAM,
            Timeout => 3
        );
        $self->_socketConnection($connection);
        $self->_socket($socket);
    }
    my $output = $self->_socketConnection;
    print {$output} encode_json($data)."\r\n";
    return;
}

sub _execute_mailer
{
    my $self = shift;
    my $data = shift;
    $data->{api}            = 1;
    $data->{version}        = $self->c->stash->{VERSION};
    $data->{noFork}       //= 0;
    $data->{debug}        //= 0;
    $data->{default_from} //= $self->_defaultFrom;
    no warnings;
    my $pid = open2(my $out, my $in, $LIXUZ::PATH.'/tools/lixuz-sendmail.pl') or die("Failed to open2 to lixuz-sendmail-pl\n");
    use warnings;
    print {$in} encode_json($data);
    close($in);
    close($out) if $out;
    waitpid($pid,0);
}

sub _buildFrom
{
    my $self = shift;
    my $from_address = $self->c->config->{LIXUZ}->{from_email};
    if(not $from_address)
    {
        $self->c->log->error('from_email is not set in the config, using dummy e-mail');
        $from_address = 'EMAIL_NOT_SET_IN_CONFIG@localhost';
    }
    return $from_address;
}

__PACKAGE__->meta->make_immutable;
